PUSH GIT :
git remote add origin https://github.com/pankajkr-143/Java-DSA-MACKY.git
git branch -M main
git push -u origin main

-------------------------------------------------------------------------------------


*Array*

Defination of Array
- List of elements of the same type
  placed in a contiguous memory location
---------------------------------------------

2. Operations in Arrays
- Create 
- Input
- Output
- Update

Creating a Array 

dataType arrayName[]=new dataType[size];

  int marks[] = new int[50];
  int number[] = {1, 2, 3};
  int moreNumbers[] = {4, 5, 5};
  String fruits[] = {"apple", "mango","banana"};
----------------------------------------------------

3. Input/Output

import java.util.Scanner;

public class second {

    public static void main(String[] args) {
        int marks[] = new int[100];

        Scanner sc = new Scanner(System.in);

        System.out.println("length of array: "+ marks.length);
       
        marks[0] = sc.nextInt();
        marks[1] = sc.nextInt();
        marks[2] = sc.nextInt();

        System.out.println("Phy : " + marks[0]);
        System.out.println("Chem : " + marks[1]);
        System.out.println("Math : " + marks[2]);

        

        // //update data
        // marks[2]= 99;
        // System.out.println("Chem : " + marks[2]);

        // //add sub mul div using this method sign changes data
        // marks[2]= marks[2] + 1;
        // System.out.println("Chem : " + marks[2]);

        //percentage
        int percentage = (marks[0]+marks[1]+marks[2])/3;
        System.out.println("percentage ="+ percentage + "%");

    }
}
-----------------------------------------------------------------------------

4. Array as function arguments

public class third {
    public static void update(int marks[]){
        for(int i=0; i<marks.length; i++){
            marks[i] = marks[i]+1;
        }
    }
    public static void main(String[] args) {
        int marks[] = {97, 98, 99};
        update(marks);

        for(int i=0; i<marks.length; i++){
            System.out.println(marks[i]+" ");
        }
        System.out.println();
    }
}
------------------------------------------------------------------------------

5. Linear Search in Array

Find MAX_VALUE

//find the largest number in a given array :  1,2,6,3,5

public class largeNum {
    public static int findLargest(int numbers[]) {
        int largest = Integer.MIN_VALUE; //-INFINITE

        for(int i=0; i<numbers.length; i++){
            if (largest<numbers[i]){
                largest = numbers[i];
            }
        }
        return largest;
    }
    public static void main(String[] args) {
        int number[] = {1,2,6,3,5};
        System.out.println("largest value is : " +findLargest(number));
    }
}


public class smallNumLinear {
    public static int findLargest(int numbers[]) {
        int largest = Integer.MIN_VALUE; //-INFINITE
        int smallest = Integer.MAX_VALUE; //-INFINITE

        for(int i=0; i<numbers.length; i++){
            if (largest<numbers[i]){
                largest = numbers[i];
            }
            if (smallest>numbers[i]){
                smallest = numbers[i];
            }
        }
        System.out.println("smallest value is : " +smallest);
        return largest;
    }
    public static void main(String[] args) {
        int number[] = {1,0,2,6,3,5};
        System.out.println("largest value is : " +findLargest(number));
    }
}
-------------------------------------------------------------------------------------------------

6. Binary Search in Java

Binary search is one of the searching techniques applied when the input is sorted here we are focusing on finding the middle element that acts as a reference frame whether to go left or right to it as the elements are already sorted. This searching helps in optimizing the search technique with every iteration is referred to as binary search and readers do stress over it as it is indirectly applied in solving questions.

Binary-Search


Binary Search Algorithm in Java

Start
Take input array and Target
Initialise start = 0 and end = (array size -1)
Intialise mid variable
mid = (start+end)/2
if array[ mid ] == target then return mid
if array[ mid ] < target then start = mid+1
if array[ mid ] > target then end = mid-1
if start<=end then goto step 5
return -1 as Not element found
Exit

------------------------------------------------------------------------------------------

